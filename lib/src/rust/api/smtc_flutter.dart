// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.32.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::rust_async::RwLock<SMTCFlutter>>
@sealed
class SmtcFlutter extends RustOpaque {
  SmtcFlutter.dcoDecode(List<dynamic> wire)
      : super.dcoDecode(wire, _kStaticData);

  SmtcFlutter.sseDecode(int ptr, int externalSizeOnNative)
      : super.sseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_SmtcFlutter,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_SmtcFlutter,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_SmtcFlutterPtr,
  );

  Future<void> close({dynamic hint}) =>
      RustLib.instance.api.smtcFlutterClose(that: this, hint: hint);

  factory SmtcFlutter({dynamic hint}) =>
      RustLib.instance.api.smtcFlutterNew(hint: hint);

  Stream<SMTCControlEvent> subscribeToControlEvents({dynamic hint}) =>
      RustLib.instance.api
          .smtcFlutterSubscribeToControlEvents(that: this, hint: hint);

  Future<void> updateDisplay(
          {required String title,
          required String artist,
          required String album,
          required String path,
          dynamic hint}) =>
      RustLib.instance.api.smtcFlutterUpdateDisplay(
          that: this,
          title: title,
          artist: artist,
          album: album,
          path: path,
          hint: hint);

  Future<void> updateState({required SMTCState state, dynamic hint}) =>
      RustLib.instance.api
          .smtcFlutterUpdateState(that: this, state: state, hint: hint);
}

enum SMTCControlEvent {
  play,
  pause,
  previous,
  next,
  unknown,
  ;
}

enum SMTCState {
  paused,
  playing,
  ;
}
