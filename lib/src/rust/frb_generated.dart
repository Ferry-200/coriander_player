// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.32.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api/smtc_flutter.dart';
import 'api/system_theme.dart';
import 'api/tag_reader.dart';
import 'api/utils.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.io.dart' if (dart.library.html) 'frb_generated.web.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
    );
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor =>
      RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor =>
      RustLibWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {}

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.0.0-dev.32';

  @override
  int get rustContentHash => -332601342;

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
    stem: 'rust_lib',
    ioDirectory: 'rust/target/release/',
    webPrefix: 'pkg/',
  );
}

abstract class RustLibApi extends BaseApi {
  Future<void> smtcFlutterClose({required SmtcFlutter that, dynamic hint});

  SmtcFlutter smtcFlutterNew({dynamic hint});

  Stream<SMTCControlEvent> smtcFlutterSubscribeToControlEvents(
      {required SmtcFlutter that, dynamic hint});

  Future<void> smtcFlutterUpdateDisplay(
      {required SmtcFlutter that,
      required String title,
      required String artist,
      required String album,
      required String path,
      dynamic hint});

  Future<void> smtcFlutterUpdateState(
      {required SmtcFlutter that, required SMTCState state, dynamic hint});

  SystemTheme systemThemeGetSystemTheme({dynamic hint});

  Stream<SystemTheme> systemThemeOnSystemThemeChanged({dynamic hint});

  Future<bool> buildIndexFromPath(
      {required String path, required String indexPath, dynamic hint});

  Future<String?> getLyricFromPath({required String path, dynamic hint});

  Future<Uint8List?> getPictureFromPath({required String path, dynamic hint});

  Future<bool> updateIndex({required String indexPath, dynamic hint});

  Future<bool> launchInBrowser({required String uri, dynamic hint});

  Future<String?> pickSingleFolder({dynamic hint});

  Future<bool> showInExplorer({required String path, dynamic hint});

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_SmtcFlutter;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_SmtcFlutter;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_SmtcFlutterPtr;
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  Future<void> smtcFlutterClose({required SmtcFlutter that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockSMTCFlutter(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 5, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kSmtcFlutterCloseConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSmtcFlutterCloseConstMeta => const TaskConstMeta(
        debugName: "SmtcFlutter_close",
        argNames: ["that"],
      );

  @override
  SmtcFlutter smtcFlutterNew({dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 1)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockSMTCFlutter,
        decodeErrorData: null,
      ),
      constMeta: kSmtcFlutterNewConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSmtcFlutterNewConstMeta => const TaskConstMeta(
        debugName: "SmtcFlutter_new",
        argNames: [],
      );

  @override
  Stream<SMTCControlEvent> smtcFlutterSubscribeToControlEvents(
      {required SmtcFlutter that, dynamic hint}) {
    final sink = RustStreamSink<SMTCControlEvent>();
    unawaited(handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockSMTCFlutter(
            that, serializer);
        sse_encode_StreamSink_smtc_control_event_Sse(sink, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 2, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kSmtcFlutterSubscribeToControlEventsConstMeta,
      argValues: [that, sink],
      apiImpl: this,
      hint: hint,
    )));
    return sink.stream;
  }

  TaskConstMeta get kSmtcFlutterSubscribeToControlEventsConstMeta =>
      const TaskConstMeta(
        debugName: "SmtcFlutter_subscribe_to_control_events",
        argNames: ["that", "sink"],
      );

  @override
  Future<void> smtcFlutterUpdateDisplay(
      {required SmtcFlutter that,
      required String title,
      required String artist,
      required String album,
      required String path,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockSMTCFlutter(
            that, serializer);
        sse_encode_String(title, serializer);
        sse_encode_String(artist, serializer);
        sse_encode_String(album, serializer);
        sse_encode_String(path, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 4, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kSmtcFlutterUpdateDisplayConstMeta,
      argValues: [that, title, artist, album, path],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSmtcFlutterUpdateDisplayConstMeta => const TaskConstMeta(
        debugName: "SmtcFlutter_update_display",
        argNames: ["that", "title", "artist", "album", "path"],
      );

  @override
  Future<void> smtcFlutterUpdateState(
      {required SmtcFlutter that, required SMTCState state, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockSMTCFlutter(
            that, serializer);
        sse_encode_smtc_state(state, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 3, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kSmtcFlutterUpdateStateConstMeta,
      argValues: [that, state],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSmtcFlutterUpdateStateConstMeta => const TaskConstMeta(
        debugName: "SmtcFlutter_update_state",
        argNames: ["that", "state"],
      );

  @override
  SystemTheme systemThemeGetSystemTheme({dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 6)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_system_theme,
        decodeErrorData: null,
      ),
      constMeta: kSystemThemeGetSystemThemeConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSystemThemeGetSystemThemeConstMeta => const TaskConstMeta(
        debugName: "system_theme_get_system_theme",
        argNames: [],
      );

  @override
  Stream<SystemTheme> systemThemeOnSystemThemeChanged({dynamic hint}) {
    final sink = RustStreamSink<SystemTheme>();
    unawaited(handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_StreamSink_system_theme_Sse(sink, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 7, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kSystemThemeOnSystemThemeChangedConstMeta,
      argValues: [sink],
      apiImpl: this,
      hint: hint,
    )));
    return sink.stream;
  }

  TaskConstMeta get kSystemThemeOnSystemThemeChangedConstMeta =>
      const TaskConstMeta(
        debugName: "system_theme_on_system_theme_changed",
        argNames: ["sink"],
      );

  @override
  Future<bool> buildIndexFromPath(
      {required String path, required String indexPath, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(path, serializer);
        sse_encode_String(indexPath, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 8, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kBuildIndexFromPathConstMeta,
      argValues: [path, indexPath],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kBuildIndexFromPathConstMeta => const TaskConstMeta(
        debugName: "build_index_from_path",
        argNames: ["path", "indexPath"],
      );

  @override
  Future<String?> getLyricFromPath({required String path, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(path, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 10, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_String,
        decodeErrorData: null,
      ),
      constMeta: kGetLyricFromPathConstMeta,
      argValues: [path],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kGetLyricFromPathConstMeta => const TaskConstMeta(
        debugName: "get_lyric_from_path",
        argNames: ["path"],
      );

  @override
  Future<Uint8List?> getPictureFromPath({required String path, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(path, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 11, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_list_prim_u_8_strict,
        decodeErrorData: null,
      ),
      constMeta: kGetPictureFromPathConstMeta,
      argValues: [path],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kGetPictureFromPathConstMeta => const TaskConstMeta(
        debugName: "get_picture_from_path",
        argNames: ["path"],
      );

  @override
  Future<bool> updateIndex({required String indexPath, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(indexPath, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 9, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kUpdateIndexConstMeta,
      argValues: [indexPath],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kUpdateIndexConstMeta => const TaskConstMeta(
        debugName: "update_index",
        argNames: ["indexPath"],
      );

  @override
  Future<bool> launchInBrowser({required String uri, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(uri, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 14, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kLaunchInBrowserConstMeta,
      argValues: [uri],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kLaunchInBrowserConstMeta => const TaskConstMeta(
        debugName: "launch_in_browser",
        argNames: ["uri"],
      );

  @override
  Future<String?> pickSingleFolder({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 13, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_String,
        decodeErrorData: null,
      ),
      constMeta: kPickSingleFolderConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kPickSingleFolderConstMeta => const TaskConstMeta(
        debugName: "pick_single_folder",
        argNames: [],
      );

  @override
  Future<bool> showInExplorer({required String path, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(path, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 12, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kShowInExplorerConstMeta,
      argValues: [path],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kShowInExplorerConstMeta => const TaskConstMeta(
        debugName: "show_in_explorer",
        argNames: ["path"],
      );

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_SmtcFlutter => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockSMTCFlutter;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_SmtcFlutter => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockSMTCFlutter;

  @protected
  SmtcFlutter
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockSMTCFlutter(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SmtcFlutter.dcoDecode(raw as List<dynamic>);
  }

  @protected
  SmtcFlutter
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockSMTCFlutter(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SmtcFlutter.dcoDecode(raw as List<dynamic>);
  }

  @protected
  SmtcFlutter
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockSMTCFlutter(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SmtcFlutter.dcoDecode(raw as List<dynamic>);
  }

  @protected
  RustStreamSink<SMTCControlEvent> dco_decode_StreamSink_smtc_control_event_Sse(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  RustStreamSink<SystemTheme> dco_decode_StreamSink_system_theme_Sse(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  bool dco_decode_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  int dco_decode_i_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  String? dco_decode_opt_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_String(raw);
  }

  @protected
  Uint8List? dco_decode_opt_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_list_prim_u_8_strict(raw);
  }

  @protected
  (int, int, int, int) dco_decode_record_u_8_u_8_u_8_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4) {
      throw Exception('Expected 4 elements, got ${arr.length}');
    }
    return (
      dco_decode_u_8(arr[0]),
      dco_decode_u_8(arr[1]),
      dco_decode_u_8(arr[2]),
      dco_decode_u_8(arr[3]),
    );
  }

  @protected
  SMTCControlEvent dco_decode_smtc_control_event(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SMTCControlEvent.values[raw as int];
  }

  @protected
  SMTCState dco_decode_smtc_state(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SMTCState.values[raw as int];
  }

  @protected
  SystemTheme dco_decode_system_theme(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return SystemTheme(
      fore: dco_decode_record_u_8_u_8_u_8_u_8(arr[0]),
      accent: dco_decode_record_u_8_u_8_u_8_u_8(arr[1]),
    );
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  int dco_decode_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeI64OrU64(raw);
  }

  @protected
  SmtcFlutter
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockSMTCFlutter(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SmtcFlutter.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  SmtcFlutter
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockSMTCFlutter(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SmtcFlutter.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  SmtcFlutter
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockSMTCFlutter(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SmtcFlutter.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  RustStreamSink<SMTCControlEvent> sse_decode_StreamSink_smtc_control_event_Sse(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    throw UnimplementedError('Unreachable ()');
  }

  @protected
  RustStreamSink<SystemTheme> sse_decode_StreamSink_system_theme_Sse(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    throw UnimplementedError('Unreachable ()');
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  String? sse_decode_opt_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_String(deserializer));
    } else {
      return null;
    }
  }

  @protected
  Uint8List? sse_decode_opt_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_list_prim_u_8_strict(deserializer));
    } else {
      return null;
    }
  }

  @protected
  (int, int, int, int) sse_decode_record_u_8_u_8_u_8_u_8(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_u_8(deserializer);
    var var_field1 = sse_decode_u_8(deserializer);
    var var_field2 = sse_decode_u_8(deserializer);
    var var_field3 = sse_decode_u_8(deserializer);
    return (var_field0, var_field1, var_field2, var_field3);
  }

  @protected
  SMTCControlEvent sse_decode_smtc_control_event(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return SMTCControlEvent.values[inner];
  }

  @protected
  SMTCState sse_decode_smtc_state(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return SMTCState.values[inner];
  }

  @protected
  SystemTheme sse_decode_system_theme(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_fore = sse_decode_record_u_8_u_8_u_8_u_8(deserializer);
    var var_accent = sse_decode_record_u_8_u_8_u_8_u_8(deserializer);
    return SystemTheme(fore: var_fore, accent: var_accent);
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  int sse_decode_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint64();
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockSMTCFlutter(
          SmtcFlutter self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockSMTCFlutter(
          SmtcFlutter self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockSMTCFlutter(
          SmtcFlutter self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_StreamSink_smtc_control_event_Sse(
      RustStreamSink<SMTCControlEvent> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(
        self.setupAndSerialize(
            codec: SseCodec(
                decodeSuccessData: sse_decode_smtc_control_event,
                decodeErrorData: null)),
        serializer);
  }

  @protected
  void sse_encode_StreamSink_system_theme_Sse(
      RustStreamSink<SystemTheme> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(
        self.setupAndSerialize(
            codec: SseCodec(
                decodeSuccessData: sse_decode_system_theme,
                decodeErrorData: null)),
        serializer);
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
      Uint8List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_opt_String(String? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_String(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_list_prim_u_8_strict(
      Uint8List? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_list_prim_u_8_strict(self, serializer);
    }
  }

  @protected
  void sse_encode_record_u_8_u_8_u_8_u_8(
      (int, int, int, int) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_8(self.$1, serializer);
    sse_encode_u_8(self.$2, serializer);
    sse_encode_u_8(self.$3, serializer);
    sse_encode_u_8(self.$4, serializer);
  }

  @protected
  void sse_encode_smtc_control_event(
      SMTCControlEvent self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_smtc_state(SMTCState self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_system_theme(SystemTheme self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_record_u_8_u_8_u_8_u_8(self.fore, serializer);
    sse_encode_record_u_8_u_8_u_8_u_8(self.accent, serializer);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_usize(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint64(self);
  }
}
