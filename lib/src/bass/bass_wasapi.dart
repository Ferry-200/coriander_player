// Generated by `package:ffigen`.
// ignore_for_file: type=lint,
import 'dart:ffi' as ffi;
import 'bass.dart';

const int BASS_WASAPI_EXCLUSIVE = 1;

const int BASS_WASAPI_EVENT = 16;

const int BASS_ERROR_WASAPI = 5000;

const int BASS_ERROR_WASAPI_BUFFER = 5001;

const int BASS_ERROR_WASAPI_CATEGORY = 5002;

const int BASS_ERROR_WASAPI_DENIED = 5003;

// const int BASS_ERROR_UNKNOWN = -1;

// typedef DWORD = ffi.UnsignedLong;

typedef BOOL = ffi.Int;

typedef WASAPIPROC = ffi.NativeFunction<
    DWORD Function(ffi.Pointer<ffi.Void> buffer, DWORD length,
        ffi.Pointer<ffi.Void> user)>;

class BassWasapi {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  BassWasapi(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  BassWasapi.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  int BASS_WASAPI_IsStarted() {
    return _BASS_WASAPI_IsStarted();
  }

  late final _BASS_WASAPI_IsStartedPtr =
      _lookup<ffi.NativeFunction<BOOL Function()>>('BASS_WASAPI_IsStarted');
  late final _BASS_WASAPI_IsStarted =
      _BASS_WASAPI_IsStartedPtr.asFunction<int Function()>();

  int BASS_WASAPI_Start() {
    return _BASS_WASAPI_Start();
  }

  late final _BASS_WASAPI_StartPtr =
      _lookup<ffi.NativeFunction<BOOL Function()>>('BASS_WASAPI_Start');
  late final _BASS_WASAPI_Start =
      _BASS_WASAPI_StartPtr.asFunction<int Function()>();

  int BASS_WASAPI_Stop(
    int reset,
  ) {
    return _BASS_WASAPI_Stop(
      reset,
    );
  }

  late final _BASS_WASAPI_StopPtr =
      _lookup<ffi.NativeFunction<BOOL Function(BOOL)>>('BASS_WASAPI_Stop');
  late final _BASS_WASAPI_Stop =
      _BASS_WASAPI_StopPtr.asFunction<int Function(int)>();

  int BASS_WASAPI_Init(
    int device,
    int freq,
    int chans,
    int flags,
    double buffer,
    double period,
    ffi.Pointer<WASAPIPROC> proc,
    ffi.Pointer<ffi.Void> user,
  ) {
    return _BASS_WASAPI_Init(
      device,
      freq,
      chans,
      flags,
      buffer,
      period,
      proc,
      user,
    );
  }

  late final _BASS_WASAPI_InitPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(
              ffi.Int,
              DWORD,
              DWORD,
              DWORD,
              ffi.Float,
              ffi.Float,
              ffi.Pointer<WASAPIPROC>,
              ffi.Pointer<ffi.Void>)>>('BASS_WASAPI_Init');
  late final _BASS_WASAPI_Init = _BASS_WASAPI_InitPtr.asFunction<
      int Function(int, int, int, int, double, double, ffi.Pointer<WASAPIPROC>,
          ffi.Pointer<ffi.Void>)>();

  int BASS_WASAPI_Free() {
    return _BASS_WASAPI_Free();
  }

  late final _BASS_WASAPI_FreePtr =
      _lookup<ffi.NativeFunction<BOOL Function()>>('BASS_WASAPI_Free');
  late final _BASS_WASAPI_Free =
      _BASS_WASAPI_FreePtr.asFunction<int Function()>();
}
